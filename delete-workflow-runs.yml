name: Delete Workflow Runs

permissions:
  actions: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      branch_selection:
        description: 'Branch selection'
        required: true
        type: choice
        options:
          - 'specific'
          - 'all'
        default: 'specific'
      branch_name:
        description: 'Branch name (required if "specific" is selected)'
        required: false
        type: string
      workflow_name:
        description: 'Workflow name (empty for all)'
        required: false
        type: string
      days_old:
        description: 'Only delete runs older than X days'
        required: false
        type: number
      status:
        description: 'Filter by run status'
        required: false
        type: choice
        options:
          - ''
          - 'cancelled'
          - 'failure'
          - 'success'
        default: ''
      cleanup_self:
        description: 'Cleanup previous runs of this action'
        required: true
        type: boolean
        default: true
      dry_run:
        description: 'Dry run'
        required: true
        type: boolean
        default: true

jobs:
  delete-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            function parseInputs() {
              const branchSelection = '${{ github.event.inputs.branch_selection }}';
              const branchNameInput = '${{ github.event.inputs.branch_name }}';
              const workflowName = '${{ github.event.inputs.workflow_name }}';
              const daysOldInput = '${{ github.event.inputs.days_old }}';
              const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
              const status = '${{ github.event.inputs.status }}';
              const cleanupSelf = '${{ github.event.inputs.cleanup_self }}' === 'true';
              
              // Only use branch name if 'specific' is selected
              const branchName = branchSelection === 'specific' ? branchNameInput : '';
              
              // Validate that branch name is provided when 'specific' is selected
              if (branchSelection === 'specific' && (!branchName || branchName.trim() === '')) {
                throw new Error('Branch name is required when "specific" branch selection is chosen');
              }
              
              let cutoffDate = null;
              if (daysOldInput && daysOldInput.trim() !== '') {
                const daysOld = parseInt(daysOldInput);
                const now = new Date();
                cutoffDate = new Date(now.setDate(now.getDate() - daysOld));
              }
              
              return { branchName, branchSelection, workflowName, daysOldInput, dryRun, cutoffDate, status, cleanupSelf };
            }
            
            async function getWorkflows(workflowName) {
              if (workflowName) {
                console.log('Fetching workflow by name...');
                const { data: allWorkflows } = await github.rest.actions.listRepoWorkflows({
                  owner,
                  repo,
                });
                const matchingWorkflow = allWorkflows.workflows.find(w => w.name === workflowName || w.path.endsWith(`/${workflowName}`) || w.path === workflowName);
                if (matchingWorkflow) {
                  console.log(`Found workflow: ${matchingWorkflow.name} (${matchingWorkflow.id})`);
                  return [matchingWorkflow];
                } else {
                  throw new Error(`Workflow "${workflowName}" not found. Please check the name and try again.`);
                }
              }
              
              console.log('Fetching all workflows...');
              const { data: allWorkflows } = await github.rest.actions.listRepoWorkflows({
                owner,
                repo,
              });
              console.log(`Found ${allWorkflows.workflows.length} workflows`);
              return allWorkflows.workflows;
            }
            
            async function fetchAllWorkflowRuns(workflow, branchName) {
              let allWorkflowRuns = [];
              let page = 1;
              const pageSize = 100;
              let hasMorePages = true;
              
              console.log(`Fetching workflow runs for workflow: ${workflow.name}...`);
              
              while (hasMorePages) {
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflow.id,
                  branch: branchName || undefined,
                  per_page: pageSize,
                  page: page,
                });
                
                allWorkflowRuns = allWorkflowRuns.concat(runs.workflow_runs);
                
                hasMorePages = runs.workflow_runs.length === pageSize;
                page++;
                
                if (hasMorePages) {
                  console.log(`Fetched page ${page-1} (${runs.workflow_runs.length} runs), getting next page...`);
                }
              }
              
              console.log(`Found ${allWorkflowRuns.length} runs for workflow: ${workflow.name}`);
              return allWorkflowRuns;
            }
            
            async function deleteWorkflowRun(run, dryRun) {
              const prefix = dryRun ? "[DRY RUN] Would delete" : "Deleting";
              console.log(`${prefix} workflow run #${run.id} - "${run.name}" - Branch: ${run.head_branch} - Status: ${run.conclusion} - Created: ${new Date(run.created_at).toISOString()}`);
              
              if (dryRun) {
                return true;
              }
              
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner,
                  repo,
                  run_id: run.id
                });
                console.log(`Successfully deleted run #${run.id}`);
                return true;
              } catch (error) {
                console.error(`Failed to delete run #${run.id}: ${error.message}`);
                return false;
              }
            }
            
            async function main() {
              const { branchName, branchSelection, workflowName, daysOldInput, dryRun, cutoffDate, status, cleanupSelf } = parseInputs();
              
              console.log(`Searching for workflow runs with the following filters:`);
              console.log(`- Branch: ${branchSelection === 'specific' ? branchName : 'All branches'}`);
              console.log(`- Workflow: ${workflowName || 'All workflows'}`);
              console.log(`- Older than: ${cutoffDate ? `${daysOldInput} days` : 'No age filter'}`);
              console.log(`- Status: ${status || 'All statuses'}`);
              console.log(`- Cleanup self: ${cleanupSelf ? 'Yes' : 'No'}`);
              console.log(`- Dry run: ${dryRun ? 'Yes' : 'No'}`);
              
              let workflows = await getWorkflows(workflowName);
              
              // Add current workflow if self-cleanup is enabled and not already in the list
              if (cleanupSelf) {
                const currentRunId = context.runId;
                try {
                  const { data: currentRun } = await github.rest.actions.getWorkflowRun({
                    owner,
                    repo,
                    run_id: currentRunId
                  });
                  
                  const currentWorkflowId = currentRun.workflow_id;
                  
                  if (!workflows.some(w => w.id === currentWorkflowId)) {
                    console.log(`Adding current workflow (ID: ${currentWorkflowId}) for cleanup`);
                    
                    const { data: currentWorkflow } = await github.rest.actions.getWorkflow({
                      owner,
                      repo,
                      workflow_id: currentWorkflowId
                    });
                    
                    workflows.push(currentWorkflow);
                  }
                } catch (error) {
                  console.error(`Failed to get current workflow: ${error.message}`);
                }
              }
              
              let totalRuns = 0;
              let deletedRuns = 0;
              
              for (const workflow of workflows) {
                console.log(`Processing workflow: ${workflow.name}`);
                
                const workflowRuns = await fetchAllWorkflowRuns(workflow, branchName);
                totalRuns += workflowRuns.length;
                
                for (const run of workflowRuns) {
                  if (run.id === context.runId) {
                    console.log(`Skipping current run #${run.id}`);
                    continue;
                  }
                  
                  const createdAt = new Date(run.created_at);
                  
                  if (cutoffDate && createdAt >= cutoffDate) continue;
                  if (status && run.conclusion !== status) continue;
                  if (!run.conclusion) {
                    console.log(`Skipping pending workflow run #${run.id} - "${run.name}"`);
                    continue;
                  }
                  
                  const success = await deleteWorkflowRun(run, dryRun);
                  if (success) deletedRuns++;
                }
              }
              
              console.log(`Summary: Found ${totalRuns} total runs, ${deletedRuns} ${dryRun ? 'would be' : 'were'} deleted`);
            }
            
            await main();